TERMINAL
-> Para abrir o python
    -> python3
-> Para fechar
    -> exit()
-> Para rodar um script pronto no terminal
    -> ir para o local do arquivo
    -> python3 ./arquivo.py

_______________________________________________________________________________________________________________________________________

LISTAS (ARRAYS)

cores = ["azul", "vermelho", "amarelo"]

_______________________________________________________________________________________________________________________________________

TUPLAS
-> são a mesma coisa que arrays, mas imutaveis (como se fossem arrays constantes), e elas sao instanciadas com () ao inves de []

cores = ("azul", "amarelo", "roxo") # tambem podemos colocá-las sem os (), so com as virgulas

_______________________________________________________________________________________________________________________________________

DICIONÁRIO
-> é uma estrutura que possui chave e valor
-> ele nao tem ordem, entao

dicionario = {
    "chave": "valor",
    "chave2": "valor2",
    "cor": "roxo"
}

print(dicionario["chave"]) // vai printar "valor"
print(dicionario["cor"]) // vai printar roxo

-> podemos, também, criar um dicionário dentro de uma chave, ao invés de apenas passar um valor bruto

AGENDA = {
    "antonio": {
        "numero": "9999-3333",
        "endereco": "rua tal"
    },

    "brunna": {
        "numero": "9343-3439",
        endereco": "rua tal"
    }
}

print(AGENDA["antonio"]) // vai printar todas as infos de antonio
print(AGENDA["brunna"][numero]) // vai printar o numero de brunna
_______________________________________________________________________________________________________________________________________

CONJUNTOS
-> declaramos com chaves {}
-> são valores guardados que ficam desordenados (não possuem indices)
-> nao permite valores iguais

conjunto_cores = {"vermelho", "verde", "azul"}

for cor in conjunto_cores:
    print(cor) // cada vez que vc rodar o programa vai ser printado de um jeito diferente

_______________________________________________________________________________________________________________________________________

INPUT
x = input("insira uma string")
y = int(input("insira um inteiro"))
z = float(input("insira um num decimal"))
w = bool(input("True ou False?"))

_______________________________________________________________________________________________________________________________________

FOR LOOP ******

for i in range(6):
    ...

for item in loja:
    printf(loja[item])

_______________________________________________________________________________________________________________________________________

IF STATEMENT ******

if (2 >= 10):
    ...
elif (x == 6):
    ...
else:
    ...
_______________________________________________________________________________________________________________________________________

WHILE ******

while number < 10:
    ...

_______________________________________________________________________________________________________________________________________

MÉTODOS/FUNÇÕES (CRIAÇÃO)

def soma(first_num, sec_num):
    result = first_num + sec_num

    return result

_______________________________________________________________________________________________________________________________________

TRY/EXCEPT

-> o except é o mesmo que catch, é onde cai o erro

 def divisao(a, b)
    try:
        print(a/b)
    except:
        print("divisão inválida") // tratando genericamente
ou::

 def divisao(a, b)
    try:
        print(a/b)
    except Exception as error:
        print(error) // vai logar o erro exato

ou::

 def divisao(a, b)
    try:
        print(a/b)
    
    except ValueError as error:                         // vai tratar o erro especifico
        print("input invalido digite apenas numeros")
    except ZeroDivisionError as error:
        print("nao se divide nenhum numero por zero")
    expect Exception as error:                          // lida com os demais erros
        print("algum erro ocorreu")
    finally:                                            // o que acontece dps de tratar o erro
        print("fim do programa")

______________________________________________________________________________________________________________________________________

__name__ == __main__

->  Quando executamos diretamente o código python de um arquivo (isto é, quando não estamos executando ele através de uma importação),
o python nomeia todo o bloco de código que será executado como __main__
-> Por isso, podemos usar a linha de código
    if (__name__ == "__main__"):
        *codigo*
para executar um código que será apenas executável quando aquele arquivo está sendo rodado diretamente.

EX:

print("teste")

if __name__ == "__main__":
    print("teste2")

-> Nesse código, caso executemos ele diretamente no arquivo, ira printar ambos "teste" e "teste2". Mas se for executado externamente,
irá printar apenas o "teste" (é desse modo que funciona a lógica do name-main)